1) You cannot use class in JSX elements because class is reserved keyword in JavaScript. We use className instead.

2) <div className="App">
    <h1>Hi, I am a react app </h1>
   </div> --> This is not html. Its JSX. Its get compiled to JavaScript in the end.

 is exactly same as

 return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Hi, I\'m a react app'));
 That is why we need to import react in every component.

 3) JSX expression must have only one root element. This has changed with react 16 where you can return adjacent elements. But its still a best practice to wrap everything in one root element per component. Makes it easy to apply styling.

 4) In convention, give your component and your file a name starting with a capital letter.

 5) In JSX, all the elements starting with a lower case are reserved for native HTML elements. You can also have a component called "Div". But you'll need to import it with a name beginning with capital D.

 6) If we have some dynamic code which we want to be interpreted as JavaScript code and not as text JSX, we need to wrap it in curly braces. We cannot define a JS class, but we can execute one line expressions like calculations or function calls. We can call a function that does some complex stuff. We cannot have block statements like if condition.

 7) In functional components, its props.name. In class components, it will be this.props.

 8) Children is a reserved keyword. It refers to any elements (including plain text) between the opening and closing tags of our component. You can nest complex html betweeen this too( list elements, other components, etc)

 9) State property can only be defined in components that extend 'Component' class. Not in functional components. You can manage state in functional components using hooks.

 10) You should use as much functional components as possible, beacuse having states in multiple class components becomes difficult to manage when the app grows.

 11) State can be any object with any properties.

 12) props and state are CORE concepts of React. Actually, only changes in props and/ or state trigger React to re-render your components and potentially update the DOM in the browser

 13) For the methods that you don't actively call, but assign as a event handler, the naming convention is abcHandler.

 14) Do not add paranthesis after handler function call because react will then immediately invoke the function as it comes across it. (Chapter 40)

 15) setState will not discard your state and replace it. It will compare it to the previous state object and replace only that which is updated. It will not touch any other parameters.

 16) useState() returns a state in exactly 2 elements. The first element is always the current state, the second element is the function that will update the state in a way that React will detect and will rerender the DOM.

 17) The second element returned by useState i.e the function which updates the state will discard your state and replace it. It will not "update" your current state. You have to manually make sure to include all other unchanged properties. The alternative is to call useState again to divide the state into pieces.

 18) A stateful component is the one that manages the state, irrespective of whether it is a class based component or a functional component using hooks. Stateless components have no internal state management.

 19) It is a good practice to use/create as many stateless/dumb/presentational components as possible.

 20) You can pass methods in props so that you can use a function to modify the state from the other component which doesn't have direct access to that function.

 21) Use inline style to scope the styling to a single element. Or else use a css file.

 22) If you use arrow function as opposed to normal function, the arraw function will always, under all circumstances make sure that "this" in the function refers to the current class. This is due to internals of JavaScript.

 23) React needs the key property to compare the virtual DOM to the actual DOM (the dom which is currently rendered to the DOM which was rendered previously) to check which items are still present and which are not.

 24) You cannot use pseudo-selectors in inline styling.

 25) To edit styles dynamically, you just manipulate the style object like in normal javascript and then bind the object to the element.

 26) Radium is a popular package for react which enables us to use pseudo-selectors and media queries with inline styling. 

 27) export default Radium(App); --> Here, radium is called a higher order component. Its just a component wrapping another component and adding some extra functionality to it. You can also do it with sunctional components.

 28) styled-components.com

 29) styled.xxx always returns a component. So you can just store it in a variable. You do not need to use arrow functions or make calls.

 30) The styled components does not add inline css to the elements. Instead it creates a style tag, adds it to the head of the document and then applies the styles using classes to the appropriate elements.

 31) You don't need the quotes in styled components because you write regular css.

 32) If you are using react-scripts 2.x or higher, you need to write 
 "import classes from './Person.module.css';" and rename the css file to Person.module.css. Then it will automatically work without ejecting. You can skip the eject step.

 -----Understanding error messages

 33) The source map allows you to see your code and debug it in chrome developer tools even though the code that is shipped is bundled or minimized. This is not the code running in the browser.

 34) React Developer tools - chrome extensions

 35) ErrorBoundary is a high level component. It simply wraps other component to handle any error that component might throw.

 36) We need to add the key to the ErrorBoundary component since that is now the parent component and the key in the map method must always be on the outer component.

 37) Do not use ErrorBoundary in the entire code. Only use them if you know you have a code that might fail and you can't control that. Do not use them for places which might have developer bugs.


---- Components and React Internals

 38) Container components such as App.js, i.e, the components that manage state shouldn't be involved in the UI rendering so much. render() should be lean and not contain too much JSX.

 39) Stateful components does NOT automatically mean class components, though historically that has been the case because react hooks was introduced recently in React 16.8.

 40) Lifecycle hooks are supported in class based components. They are still not supported in functional components.

 41) Although functional components can now manage state, you might be working on a project that does not have the latest version of React. In such cases, it is important to remember that only class based components can manage the state.

 42) In class based components, you access the props and state using 'this' keywords because state and props are properties of component class.(this.state.XY and this.props.XY)

 43) In functional components, you get the props as an argument so you can directly use it (props.XY).

 44) Component lifecycle is only available in CLASS BASED components.

 --- Watch lifecycle hooks slide

 45) Do not cause side effects in your constructor. Like sending an HTTP request, storing data in your local storage of browser, or sending analytics to Google analytics. Such things impact the performance of your app.

 46) No http requests or timeouts in render() method. Nothing that can block the execution of this method.

 47) You should write your http requests in componentDidMount(). Do not update state in this method. You can do it if your promise of http request resolves and is supposed to render something, but do not call set state immediately after this method is called, because that will trigger a re-render cycle and that is bad for performance.

 48) Just like we have a lifecycle for component creation, we also have one for updating a component.

 49) getSnapshotBeforeUpdate method of the Component Lifecycle -update is used to take a snapshot of the DOM before updating it. This might be used to retain the scrolling position of the user in case if the entire DOM is rerendered and new elements are added. This retaining of scrolling position will be done in componentDidUpdate method.

 50) useEffect covers all the class based Lifecycle hooks into one react hook. Although it is called a hook, it is not a lifecycle hook. Its a react hook.

 51) useEffect by default takes a function that will run for every render cycle.

 52) You can pass an array in useEffect of the components which if changed, the component containing the useEffect should run.

 53) If you pass an empty array in useEffect function, this tells React this effect has no dependencies and it should re run only if one of the dependencies changes. Since it has no dependencies, it will never run. (componentDidMount == useEffect(()=>{}, []));

 54) There are times when you will need to clean up after your component is renrendered. Like closing a live connection to the server, etc.

 55) If you return a function in your useEffect, it will run BEFORE the main useEffect function runs, but AFTER the (first) render cycle. 

56) React.memo() uses memoization which is a technique where React will memoize (store) a snapshot of this component and only if the input changes, it will re render the component. Otherwise if the inputs do not change, and some parent component wants to update the child component, React will give back the stored component.

57) It is a good ides to wrap the functional components taht might not change with every update to the parent component with React.memo().

58) You should use shouldComponentUpdate(class)/ React.memo() only if your component might not update based on the changes in your parent component. Do not use it if your component depends upon the input from the parent component and must always update when the parent component updates.

59) PureComponent is a normal component that already implements shouldComponentUpdate with a complete props check. So check for any changes in any props of that component.

60) React does not immediately update the real DOM when render() or JSX in functional components is executed.

61) It compares the old virtual DOM with the re-rendered(next) virtual DOM. This is done because it is faster than real DOM.

62) Virtual DOM is the DOM rendered in JavaScript without any actual rendering to the browser.

63) If React detects changes in real dom and re-rendered dom, it touches the real dom to update ONLY the updated parts. If there are no changes, it does not touch the real DOM.

64) Children in react will always refer to the content between the opening and closing tags of your component.

65) Instead of creating an Auxiliary component, you can also use React.Fragment. Instead of <Auxiliary>, wrap your adjacent components in <React.Fragment>. It works exactly the same as Auxiliary component under the hood.

66) HOC -> Higher order components just wrap the other components. It does not contain any logic, styling or does not make any changes to the real DOM.

67) Its a convention to name higher order components with a "With..." in the beginning.

68) If your higher order component does some style or manipulation of JSX code, those work well as wrapping components. If you have to write a component for JS code to handle error or send analytics, then use it at the export level.

68) You call setState synchronously, but IT IS NOT GUARANTEED TO EXECUTE AND FINISH IMMEDIATELY. React will schedule the setState to run at an appropriate time when it has all the resources it needs. In most cases this is immediate, but it is not guaranteed.

69) You can use PropTypes for your class or functional component to let your team or any other developer working on the project know about the props and their types that the component accepts and uses, or you are building a library that is going to be shared with other people.

70) React.context({}) is a globally available JS object. Not exactly globally available, but you can decide where it should be available. It can be paased between react components without using props (behind the scenes). Technically, it doesn't have to be an object. You could also have an array, a string, a number etc. as a context value.

71) You need to wrap all the components that you need authentication for in your AuthContext component.

72) context is useful is you have very long chanins of data that you are passing around and if you don't need data in the inbetween components.

73) useContext is to functional components what static contextType is to class based components.